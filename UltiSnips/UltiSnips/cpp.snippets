snippet a "assertion" b
assert($0);
endsnippet

snippet b "brackets"
{
	$0
}
endsnippet

snippet try "try catch" b
try {
	$1
} catch (${2:...}) {
	$3
}$0
endsnippet

snippet /* "comment block" b
/**
 * $0
 */
endsnippet

snippet f "function c++" b
/**
 * 
 */
${1:void} ${2:name} ($3) {
	${0:${VISUAL}}
}
endsnippet

snippet if "if"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet eli "else if"
else if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet el "else"
else {
	${0:${VISUAL}}
}
endsnippet

snippet while "while" b
while (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet fo "for" b
for (${1:auto &a : $2}) {
	${0:${VISUAL}}
}
endsnippet

snippet for "forint" b
for (int ${1:i} = ${2:0}; $1 < ${3:10}; ${4:++$1}) {
	${0:${VISUAL}}
}
endsnippet

snippet switch "switch" b
switch ($1) {
	case $0
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import string
	snip.rv = (re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet main "main()" b
int main(int argc, const char* argv[]) {
	${0:${VISUAL}}
}
endsnippet

snippet temp "template" b
template <typename ${1:T}>
endsnippet

snippet inch "include " b
#include "$1"$0
endsnippet

snippet inc "include std" b
#include <$1>$0
endsnippet

snippet s "std::"
std::
endsnippet

snippet cout "cout"
std::cout << $0 << std::endl;
endsnippet

snippet class "class" b
class $1 {
	public:
		$0
};
endsnippet
snippet clad "class, defaults deleted" b
$1() = delete;
~$1() noexcept = delete;
$1($1 const & rhs) = delete;
$1($1 && rhs) = delete;
$1& operator=($1 const & rhs) noexcept = delete;
$1& operator=($1 && rhs) noexcept = delete;
endsnippet

snippet ifd "ifdef" b
#ifdef ${1:1}
${0:${VISUAL}}
#endif /* $1 */
endsnippet
snippet ifn "ifndef" b
#ifndef ${1:NDEBUG}
${0:${VISUAL}}
#endif /* $1 */
endsnippet

snippet def "define" b
#define ${1}$0
endsnippet

snippet asm "assembly block" b
asm (
	"$0"
	:"=r" (${1:outvar})
	:"r" (${2:invar})
);
endsnippet
